`#!/usr/bin/env node`
# The `coco` utility.

global import
  Coco : require \./coco
  fs   : require \fs
  path : require \path
  util : require \util
  say  : -> process.stdout.write it + \\n
  warn : -> process.stderr.write it + \\n
  die  : -> warn it; process.exit 1
  p    : -> []forEach.call @@, console.dir
  pp   : (x, showHidden, depth) ->
    say util.inspect x, showHidden, depth, !process.env.NODE_DISABLE_COLORS
  ppp  : -> pp it, true null

# Use the [option parser](#optparse).
o = require(\./optparse) do
  interactive : 'start REPL; use ^J for multiline input'
  compile     : 'compile to JavaScript and save as .js files'
  output      :['compile into the specified directory' \DIR]
  watch       : 'watch scripts for changes, and repeat'
  print       : 'print the compiled JavaScript to stdout'
  stdin       : 'read stdin'
  eval        : 'read command line arguments as script'
  require     :['require libraries before executing' \FILE+]
  bare        : 'compile without the top-level function wrapper'
  lex         : 'print the tokens the lexer produces'
  tokens      : 'print the tokens the rewriter produces'
  ast         : 'print the syntax tree the parser produces'
  json        : 'print/compile as JSON'
  nodejs      :['pass options through to the "node" binary' \ARGS+]
  version     : 'display version'
  help        : 'display this'

die "Unrecognized option(s): #that\n\n#{help()}" if o.$unknowns * ' '

switch
case o.nodejs  then forkNode()
case o.version then say version()
case o.help    then say help()
default
  o.compile ||= o.output
  o.run = not (o.compile or o.print)
  o.print   ||= o.eval or o.stdin and o.compile
  o.bare    ||= o.run or o.json
  {$args} = o; {argv} = process
  process.execPath = argv.0 = argv.1
  argv.splice 2 9e9
  argv.push ...if o.stdin then $args else
    if o.run then $args.splice 1 9e9 else []
  if o.require
    ({filename} = module)filename = \.
    that.forEach require
    module <<< {filename}
  switch
  case o.interactive then argv.1 = \repl  ; repl()
  case o.stdin       then argv.1 = \stdin ; compileStdin()
  case o.eval        then argv.1 = \eval  ; compileScript '' $args * \\n
  case $args.length  then compileScripts()
  default say version() + \\n + help() + \\n; repl()

# Calls a `fs` method, exiting on error.
function fshoot name, arg, callback
  e, result <- fs[name] arg
  die e.stack || e if e
  callback result

# Asynchronously read in each Coco script in a list of source files and
# compile them. If a directory is passed, recursively compile all
# _.co_ files in it and all subdirectories.
function compileScripts
  $args.forEach -> walk it, , true
  function walk source, base ? path.normalize(source), top
    e, stats <- fs.stat source
    if e
      return walk "#source.co" if top
      die e
    if stats.isDirectory()
      fshoot \readdir source, -> it.forEach -> walk path.join(source, it), base
    else if top or path.extname(source)toLowerCase() is \.co
      watch source, base if o.watch
      fshoot \readFile source, -> compileScript source, "#it", base
  void

# Compile a single source script, containing the given code, according to the
# requested options.
function compileScript file, input, base
  t = {file, input, options: filename: file, bare: !!o.bare}
  try
    Coco.emit \lex t
    t.tokens = Coco.tokens t.input, raw: o.lex
    if o.lex or o.tokens
      printTokens t.tokens
      throw
    Coco.emit \parse t
    t.ast = Coco.ast t.tokens
    if o.ast
      say if o.json then t.ast.stringify 2 else ''trim.call t.ast
      throw
    Coco.emit \compile t
    t.output = t.ast.compileRoot t.options
    if o.run
      Coco.emit \run t
      if o.eval
        global <<< {module, require}
        console.log (\indirect;eval) t.output
      else
        Coco.run t.output, t.options <<< {+js}
    else
      if o.json
        t.output = JSON.stringify((\indirect;eval) t.output; null 2) + \\n
      Coco.emit \write t
      if o.print
      then say t.output.trimRight()
      else writeJS t.file, t.output, base
  catch if e?
    if Coco.listeners(\failure)length
      Coco.emit \failure e, t
    else
      warn "Failed at: #file" if file
      unless e instanceof SyntaxError or /^Parse error /test e.message
        e = e.stack or e
      (if o.watch then warn else die) e
    return
  Coco.emit \success t

# Attach the appropriate listeners to compile scripts incoming over **stdin**.
function compileStdin
  with process.openStdin()
    code = ''
    @on \data -> code += it
    @on \end  -> compileScript null code
  void

# Watch a source Coco file using `fs.watchFile`, recompiling it every
# time the file is updated. May be used in combination with other options,
# such as `--ast` or `--print`.
function watch source, base
  curr, prev <- fs.watchFile source, {+persistent, interval: 500ms}
  return if curr.size is prev.size and +curr.mtime is +prev.mtime
  buf <- fshoot \readFile source
  compileScript source, buf.toString(), base

# Write out a JavaScript source file with the compiled code. By default, files
# are written out in `cwd` as `.js` files with the same name, but the output
# directory can be customized with `--output`.
function writeJS source, js, base
  #     foo.co     => foo.js
  #     foo.jsm.co => foo.jsm
  filename = path.basename(source)replace do
    /(?:(\.\w+)?\.\w+)?$/ -> @@1 or if o.json then \.json else \.js
  dir = path.dirname source
  if o.output
    dir = path.join that, dir.slice if base is \. then 0 else base.length
  jsPath = path.join dir, filename
  function compile
    e <- fs.writeFile jsPath, js || \\n
    return warn e if e
    util.log "#source => #jsPath" if o.watch
  <- path.exists dir
  if it
  then do compile
  else require(\child_process)exec "mkdir -p #dir" compile

# Pretty-print a stream of tokens.
function printTokens tokens
  lines = []
  for [tag, val, lno] of tokens
    lines@@[lno]push if tag.toLowerCase() is val then tag else "#tag:#val"
  say(if l then l.join(' ')replace /\n/g \\\n else '') for l of lines
  void

# A Read-Eval-Print-Loop.
# Good for simple tests or poking around the
# [**node.js** API](http://nodejs.org/api/).
#
# - __^M__: Compile input, and prints (if _--compile_) or evaluates it.
# - __^J__: Insert linefeed.
# - __^C__: Cancel input if any. Quit otherwise.
# - __??__: <https://github.com/joyent/node/blob/master/lib/readline.js>
function repl
  # ref. <https://github.com/joyent/node/blob/master/lib/repl.js>
  code  = ''
  cont  = false
  stdin = process.openStdin()
  repl  = require(\readline)createInterface stdin, process.stdout
  reset = -> repl.line = code := ''; repl.prompt()
  prompt = \coco
  prompt += " -c#{ if o.bare then \b else '' }" if o.compile
  unless o.compile
    module.paths = module.._nodeModulePaths \
      module.filename = process.cwd() + \/repl
    vm      = require \vm
    context = vm.createContext()
    context <<< {...global, module, require, global: context}
    repl.completer =
      (^require(\repl)REPLServer::<<<{context, commands: []})~complete
  repl._ttyWrite = (char) -> cont := char is \\n; @[]_ttyWrite ...
  repl.on \attemptClose ->
    if repl.line or code then say ''; reset() else repl.close()
  repl.on \close stdin~destroy
  repl.on \line ->
    if cont
      code += it + \\n
      repl.output.write \. * prompt.length + '. '
      return
    code += it
    try
      if o.compile
        say Coco.compile code, {o.bare}
      else
        _  = vm.runInContext Coco.compile(code, {+bare, +repl}), context, \repl
        unless _ is void
          pp context._ = _
          say _ if typeof _ is \function
    catch then say e
    reset()
  process.on \uncaughtException -> say "\n#{ it?stack or it }"
  repl.setPrompt "#prompt> "
  repl.prompt()

# Start up a new __node.js__ instance with the arguments in `--nodejs` passed
# to it, preserving the other options.
function forkNode
  args = process.argv.slice 1; i = 0
  args.splice i-- 2 if that of <[ -n --nodejs ]> while args[++i]
  require(\child_process)spawn do
    process.execPath
    o.nodejs.join(' ')trim()split(/\s+/)concat args
    cwd: process.cwd(), env: process.env, customFds: [0 to 2]

function help then """
  Usage: coco [options] [files] [arguments]

  Options:
  #o
"""

function version then "Coco #{Coco.VERSION}"
